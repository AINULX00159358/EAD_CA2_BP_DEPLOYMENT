# build docker
# publish to container registry
# build helm
# publish to helm repo

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - None

pool:
  vmImage: ubuntu-latest

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'bc2aadcc-1517-44b8-9314-ea3f6c496a86'
  imageRepository: 'eadca2/reverse-proxy'
  containerRegistry: 'ainhabacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/nginx/Dockerfile'
  azureACRSubscription: '7263e463-da66-4888-a897-f34f5acea14b'
  azureACRResourceGroup: 'k8s-resource-group'
  ACR.Name: 'ainhabacr'
  tag: 'v1'
  deploy: false
  trivyVersion: 0.40.0
  ScanResultsPath: trivyScan


steps:
  - task: DockerInstaller@0
    displayName: 'Install Docker 17.09.0-ce'

  - script: |
       docker build --no-cache --tag reverse-proxy-nginx:CA2_TEST_V1 $(Build.SourcesDirectory)/nginx
       sudo apt-get install rpm
       wget -q https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
       sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
       mkdir $(ScanResultsPath)
       trivy image --scanners vuln,config,secret --severity CRITICAL,HIGH -o $(ScanResultsPath)/results.table reverse-proxy-nginx:CA2_TEST_V1
    displayName: 'Scan using Trivy scan'

  - task: Docker@2
    displayName: Build and push an image to container registry
    inputs:
      command: buildAndPush
      buildContext: $(Build.SourcesDirectory)/nginx
      repository: $(imageRepository)
      dockerfile: $(dockerfilePath)
      containerRegistry: $(dockerRegistryServiceConnection)
      tags: |
        $(tag)
  - task: AzureCLI@2
    condition: eq(variables.deploy, true)
    inputs:
      azureSubscription: 'Azure for Students(7263e463-da66-4888-a897-f34f5acea14b)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az acr login --name $(ACR.Name)'
  - task: KubectlInstaller@0
    condition: eq(variables.deploy, true)
    displayName: 'Install Kubectl 1.26.3'
    inputs:
      kubectlVersion: 1.26.3
  - task: KubernetesManifest@1
    condition: eq(variables.deploy, true)
    displayName: 'deploy Nginx'
    inputs:
      kubernetesServiceConnection: 'default-svc-conn'
      namespace: default
      manifests: '$(Build.SourcesDirectory)/nginx/nginx-deployment.yaml'
      rolloutStatusTimeout: 30
  - task: PublishHtmlReport@1
    inputs:
      reportDir: '$(ScanResultsPath)/results.table'