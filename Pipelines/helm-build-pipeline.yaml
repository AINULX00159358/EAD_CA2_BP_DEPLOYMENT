# build docker
# publish to container registry
# build helm
# publish to helm repo

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - None

resources:
  pipelines:
    - pipeline: FEServiceBuild
      source: FE-Service-Build
      trigger: true

pool:
  vmImage: ubuntu-latest

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'bc2aadcc-1517-44b8-9314-ea3f6c496a86'
  imageRepository: 'eadca2/bpfeapplication'
  containerRegistry: 'ainhabacr.azurecr.io'
  azureACRSubscription: '7263e463-da66-4888-a897-f34f5acea14b'
  azureACRResourceGroup: 'k8s-resource-group'
  ACR.Name: 'ainhabacr'
  tag: 'v1'


steps:
  # Package and deploy Helm charts v0
  - task: AzureCLI@2
    displayName: 'Login to Azure Container Registry'
    inputs:
      azureSubscription: 'Azure for Students(7263e463-da66-4888-a897-f34f5acea14b)'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az acr login --name $(ACR.Name)
  - task: HelmInstaller@1
    displayName: 'Install Helm'
    inputs:
      helmVersionToInstall: 'latest'
  - task: HelmDeploy@0
    displayName: 'Package the helm chart'
    inputs:
      command: 'package'
      updatedependency: true
      chartPath: '$(Build.SourcesDirectory)/helm'
      save: true
  - task: HelmDeploy@0
    displayName: 'Package the helm chart'
    inputs:
      command: 'package'
      updatedependency: true
      chartPath: '$(Build.SourcesDirectory)/LoadBalancer/helm'
      save: true
  - bash: |
      ls -l $(Build.ArtifactStagingDirectory)
      helm push $(Build.ArtifactStagingDirectory)/bpwebapp-1.0.0.tgz oci://$(ACR.Name).azurecr.io/charts/
      helm push $(Build.ArtifactStagingDirectory)/bpwebapp-loadbalancer-1.0.0.tgz oci://$(ACR.Name).azurecr.io/charts/
